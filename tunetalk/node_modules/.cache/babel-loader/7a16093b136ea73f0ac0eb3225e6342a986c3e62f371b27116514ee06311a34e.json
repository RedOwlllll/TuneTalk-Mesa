{"ast":null,"code":"var _jsxFileName = \"/Users/joelhillmann/Documents/GitHub/TuneTalk/tunetalk/src/pages/Post.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \nimport \"../css/Post.css\";\nimport StarRating from \"./StarRating\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const handleCommentSubmit = (e, username, newComment, setComments, setNewComment) => {\n  console.log(\"testers for the comment section\");\n  e.preventDefault();\n  const commentData = {\n    text: newComment,\n    user: username\n  };\n};\nfunction Post() {\n  _s();\n  //variables and hooks\n  const [recentTrack, setRecentTrack] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [replyTexts, setReplyTexts] = useState({});\n  const [caption, setCaption] = useState('');\n  const [captionPosted, setCaptionPosted] = useState(false);\n  const token = localStorage.getItem(\"access_token\");\n  const username = localStorage.getItem(\"userlogin\");\n  const [posted, setPosted] = useState(false);\n  const [editStatus, setEditStatus] = useState({});\n  const [editTexts, setEditTexts] = useState({});\n  const [editingReplyId, setEditingReplyId] = useState(null);\n  const [editReplyText, setEditReplyText] = useState({});\n  const postId = localStorage.getItem(\"postId\");\n  //function to retrieve users recerntly played song \n  const getRecentTrack = () => {\n    if (!token) {\n      console.log('No token available'); //log an error if no token is available\n      return;\n    }\n\n    //make a get request to the spotify api\n    axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\n      headers: {\n        'Authorization': `Bearer ${token}` // set the autherization header with the token\n      }\n    }).then(response => {\n      const track = response.data.items[0].track; //extract track info from the response\n\n      //axios.get('http://localhost:8082/api/caption/${track.id}')\n      //update the recentTrack state with the track details\n      setRecentTrack({\n        artist: track.artists.map(artist => artist.name).join(', '),\n        //join multiple artists the a comma\n        title: track.name,\n        //title \n        albumCover: track.album.images[0].url,\n        // URL of album image\n        caption: caption\n      });\n\n      //prepare song to be saved\n      const songData = {\n        title: track.name,\n        artist: track.artists.map(artist => artist.name).join(', '),\n        albumCover: track.album.images[0].url,\n        comments: [],\n        rating: StarRating,\n        caption: caption\n      };\n      saveTrackToDatabase(username, songData);\n      setPosted(true);\n    }).catch(error => {\n      console.log('Error fetching recent track:', error); //log any errors during the call\n    });\n  };\n\n  //api that saves the song information in the db\n  const saveTrackToDatabase = (username, songData) => {\n    console.log(songData);\n    axios.post(`http://localhost:8082/api/user/${username}/addPost`, songData).then(response => {\n      console.log('Song post saved:', response.data);\n      localStorage.setItem(\"postId\", response.data._id);\n    }).catch(error => {\n      console.error('Error saving the song post:', error.response.data);\n    });\n  };\n\n  //sets the new comments\n  const handleCommentSubmit = e => {\n    e.preventDefault();\n    const newCommentToAdd = {\n      id: comments.length + 1,\n      username: username,\n      body: newComment,\n      date: new Date(),\n      replies: []\n    };\n    setComments([...comments, newCommentToAdd]);\n    setNewComment('');\n  };\n\n  //sets the new replies\n  const handleReplySubmit = async (commentId, e) => {\n    e.preventDefault();\n    addReplyToComment(commentId, replyTexts[commentId]);\n    setReplyTexts({\n      ...replyTexts,\n      [commentId]: ''\n    });\n  };\n\n  //adds the reply to the parent comment\n  const addReplyToComment = (commentId, replyText) => {\n    const updatedComments = comments.map(comment => {\n      if (comment.id === commentId) {\n        const newReply = {\n          id: comment.replies.length + 1,\n          username: username,\n          body: replyText,\n          date: new Date()\n        };\n        return {\n          ...comment,\n          replies: [...comment.replies, newReply]\n        };\n      }\n      return comment;\n    });\n    setComments(updatedComments);\n  };\n  const handleRatingSubmit = async (rate, postId) => {\n    axios.post(`http://localhost:8082/api/posts/${postId}/rate`, {\n      rating: rate\n    }).then(response => {\n      console.log('Rating submitted:', response.data);\n    }).catch(error => {\n      console.error('Error submitting rating:', error);\n    });\n  };\n\n  // Start editing a comment\n  const handleEdit = id => {\n    setEditStatus({\n      ...editStatus,\n      [id]: true\n    });\n    setEditTexts({\n      ...editTexts,\n      [id]: comments.find(comment => comment.id === id).body\n    });\n  };\n\n  // Cancel editing\n  const handleCancel = id => {\n    setEditStatus({\n      ...editStatus,\n      [id]: false\n    });\n  };\n\n  // Save the edited comment\n  const handleSave = id => {\n    const updatedComments = comments.map(comment => {\n      if (comment.id === id) {\n        return {\n          ...comment,\n          body: editTexts[id]\n        };\n      }\n      return comment;\n    });\n    setComments(updatedComments);\n    setEditStatus({\n      ...editStatus,\n      [id]: false\n    });\n  };\n  const startEditReply = (replyId, currentText) => {\n    setEditingReplyId(replyId);\n    setEditReplyText({\n      ...editReplyText,\n      [replyId]: currentText\n    });\n  };\n\n  // Saves the reply changes\n  const saveReplyChanges = replyId => {\n    const updatedComments = comments.map(comment => {\n      if (comment.id === replyId) {\n        const updatedReplies = comment.replies.map(reply => {\n          if (reply.id === replyId) {\n            return {\n              ...reply,\n              body: editReplyText[replyId]\n            };\n          }\n          return reply;\n        });\n        return {\n          ...comment,\n          replies: updatedReplies\n        };\n      }\n      return comment;\n    });\n    setComments(updatedComments);\n    setEditingReplyId(null);\n    setEditReplyText({});\n  };\n\n  // CAPTION CODE\n\n  //Sends a POST request to the backend with the caption data\n  const saveCaptionToDatabase = async (username, captionText) => {\n    if (!captionText) return;\n    try {\n      const response = await axios.post(`http://localhost:8082/api/${username}/save-caption`, {\n        caption: captionText\n      });\n      console.log('Caption saved:', response.data);\n    } catch (error) {\n      console.error('Error saving the caption:', error.message);\n    }\n  };\n\n  //Function to handle \"Enter\" key in caption input\n  const handleCaptionKeyPress = async e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      postCaption();\n      await saveCaptionToDatabase(username, caption);\n    }\n  };\n\n  //To make the caption permanent in the song card\n  const postCaption = () => {\n    console.log('Caption is posted: \"', caption, '\"');\n    setCaptionPosted(true);\n  };\n\n  //Caption input field\n  const captionInput = /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    className: \"caption-input\",\n    placeholder: \"Add a caption\",\n    value: caption,\n    onChange: e => setCaption(e.target.value),\n    onKeyDown: handleCaptionKeyPress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 9\n  }, this);\n\n  //JSX for caption display\n  const displayCaption = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"caption-display\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }, this);\n\n  //If captionPosted is true, post is successful and returns display caption \n  //If captionPosted is false, it indicates that no caption has been posted \n  const captionRender = () => {\n    return captionPosted ? displayCaption : captionInput;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: !posted && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getRecentTrack,\n        children: \"Show Last Played Song\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), recentTrack && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"song-title\",\n          children: recentTrack.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"artist-name\",\n          children: recentTrack.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: recentTrack.albumCover,\n          alt: `${recentTrack.title} Album Cover`,\n          className: \"post-card-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(StarRating, {\n          onRating: rate => {\n            console.log(\"Rating:\", rate);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-content\",\n        children: [captionRender(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-container\",\n          children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-box\",\n            children: editStatus[comment.id] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                value: editTexts[comment.id],\n                onChange: e => setEditTexts({\n                  ...editTexts,\n                  [comment.id]: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSave(comment.id),\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleCancel(comment.id),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: comment.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: comment.body\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: new Date(comment.date).toLocaleString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"comment-edit-button\",\n                  onClick: () => handleEdit(comment.id),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 45\n              }, this), comment.replies && comment.replies.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"reply-box\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"reply-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: reply.username\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 57\n                  }, this), editingReplyId === reply.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    value: editReplyText[reply.id] || reply.body,\n                    onChange: e => setEditReplyText({\n                      ...editReplyText,\n                      [reply.id]: e.target.value\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 61\n                  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: reply.body\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 61\n                  }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                    children: new Date(reply.date).toLocaleString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"comment-edit-button\",\n                    onClick: () => startEditReply(reply.id, reply.body),\n                    children: \"Edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 57\n                  }, this), editingReplyId === reply.id && /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => saveReplyChanges(reply.id),\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 310,\n                    columnNumber: 61\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 53\n                }, this)\n              }, reply.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 49\n              }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: e => handleReplySubmit(comment.id, e),\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Reply...\",\n                  value: replyTexts[comment.id] || '',\n                  onChange: e => setReplyTexts({\n                    ...replyTexts,\n                    [comment.id]: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  children: \"Reply\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true)\n          }, comment.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleCommentSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"comment-input\",\n            placeholder: \"Add a comment...\",\n            value: newComment,\n            onChange: e => setNewComment(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-comment\",\n            children: \"Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 9\n  }, this);\n}\n_s(Post, \"p2365w2NZKbPQlROFS2tQ/83U2E=\");\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","axios","StarRating","jsxDEV","_jsxDEV","Fragment","_Fragment","handleCommentSubmit","e","username","newComment","setComments","setNewComment","console","log","preventDefault","commentData","text","user","Post","_s","recentTrack","setRecentTrack","comments","replyTexts","setReplyTexts","caption","setCaption","captionPosted","setCaptionPosted","token","localStorage","getItem","posted","setPosted","editStatus","setEditStatus","editTexts","setEditTexts","editingReplyId","setEditingReplyId","editReplyText","setEditReplyText","postId","getRecentTrack","get","headers","then","response","track","data","items","artist","artists","map","name","join","title","albumCover","album","images","url","songData","rating","saveTrackToDatabase","catch","error","post","setItem","_id","newCommentToAdd","id","length","body","date","Date","replies","handleReplySubmit","commentId","addReplyToComment","replyText","updatedComments","comment","newReply","handleRatingSubmit","rate","handleEdit","find","handleCancel","handleSave","startEditReply","replyId","currentText","saveReplyChanges","updatedReplies","reply","saveCaptionToDatabase","captionText","message","handleCaptionKeyPress","key","postCaption","captionInput","type","className","placeholder","value","onChange","target","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","displayCaption","children","captionRender","onClick","src","alt","onRating","toLocaleString","onSubmit","_c","$RefreshReg$"],"sources":["/Users/joelhillmann/Documents/GitHub/TuneTalk/tunetalk/src/pages/Post.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from 'axios';\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \nimport \"../css/Post.css\";\nimport StarRating from \"./StarRating\";\n\nexport const handleCommentSubmit = (e, username, newComment, setComments, setNewComment) => {\n\n    console.log(\"testers for the comment section\")\n    e.preventDefault(); \n\n    const commentData = {\n        text: newComment,\n        user: username\n    };\n\n};\n\n\nfunction Post() {\n\n    //variables and hooks\n    const [recentTrack, setRecentTrack] = useState(null);\n    const [comments, setComments] = useState([]);\n    const [newComment, setNewComment] = useState('');\n    const [replyTexts, setReplyTexts] = useState({});    \n    const [caption, setCaption] = useState('');\n    const [captionPosted, setCaptionPosted] = useState(false);\n\n    const token = localStorage.getItem(\"access_token\");\n    const username = localStorage.getItem(\"userlogin\");\n    const [posted, setPosted] = useState(false);\n    const [editStatus, setEditStatus] = useState({});\n    const [editTexts, setEditTexts] = useState({});\n    const [editingReplyId, setEditingReplyId] = useState(null);\n    const [editReplyText, setEditReplyText] = useState({});\n\n    const postId = localStorage.getItem(\"postId\");\n    //function to retrieve users recerntly played song \n    const getRecentTrack = () => {\n\n\n\n\n        if (!token) {\n            console.log('No token available'); //log an error if no token is available\n            return;\n        }\n\n        //make a get request to the spotify api\n        axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\n            headers: {\n                'Authorization': `Bearer ${token}` // set the autherization header with the token\n            }\n        }).then(response => {\n            const track = response.data.items[0].track; //extract track info from the response\n\n                //axios.get('http://localhost:8082/api/caption/${track.id}')\n            //update the recentTrack state with the track details\n            setRecentTrack({\n                artist: track.artists.map(artist => artist.name).join(', '), //join multiple artists the a comma\n                title: track.name, //title \n                albumCover: track.album.images[0].url, // URL of album image\n                    caption: caption\n            });\n\n            //prepare song to be saved\n            const songData = {\n                title: track.name,\n                artist: track.artists.map(artist => artist.name).join(', '),\n                albumCover: track.album.images[0].url,\n                comments: [],\n                rating: StarRating,\n                    caption: caption,\n            }\n\n            saveTrackToDatabase(username, songData);\n            setPosted(true);\n\n        }).catch(error => {\n            console.log('Error fetching recent track:', error); //log any errors during the call\n        });\n    };\n\n    //api that saves the song information in the db\n    const saveTrackToDatabase = (username, songData) => {\n        console.log(songData);\n        axios.post(`http://localhost:8082/api/user/${username}/addPost`, songData)\n            .then(response => {\n                console.log('Song post saved:', response.data);\n                localStorage.setItem(\"postId\", response.data._id);\n            })\n            .catch(error => {\n                console.error('Error saving the song post:', error.response.data);\n            });\n    };\n\n    //sets the new comments\n    const handleCommentSubmit = (e) => {\n        e.preventDefault();\n\n        const newCommentToAdd = {\n            id: comments.length + 1,\n            username: username,\n            body: newComment,\n            date: new Date(),\n            replies: []\n        };\n\n        setComments([...comments, newCommentToAdd]);\n        setNewComment('');\n    };\n\n    //sets the new replies\n    const handleReplySubmit = async (commentId, e) => {\n        e.preventDefault();\n        addReplyToComment(commentId, replyTexts[commentId]);\n        setReplyTexts({ ...replyTexts, [commentId]: '' });\n    };\n\n    //adds the reply to the parent comment\n    const addReplyToComment = (commentId, replyText) => {\n        const updatedComments = comments.map(comment => {\n            if (comment.id === commentId) {\n                const newReply = {\n                    id: comment.replies.length + 1,\n                    username: username,\n                    body: replyText,\n                    date: new Date()\n                };\n                return { ...comment, replies: [...comment.replies, newReply] };\n            }\n            return comment;\n        });\n        setComments(updatedComments);\n    };\n\n\n    const handleRatingSubmit = async (rate, postId) => {\n        axios.post(`http://localhost:8082/api/posts/${postId}/rate`, { rating: rate })\n            .then(response => {\n                console.log('Rating submitted:', response.data);\n            })\n            .catch(error => {\n                console.error('Error submitting rating:', error);\n            });\n    };\n\n    // Start editing a comment\n    const handleEdit = (id) => {\n        setEditStatus({ ...editStatus, [id]: true });\n        setEditTexts({ ...editTexts, [id]: comments.find(comment => comment.id === id).body });\n    };\n\n    // Cancel editing\n    const handleCancel = (id) => {\n        setEditStatus({ ...editStatus, [id]: false });\n    };\n\n    // Save the edited comment\n    const handleSave = (id) => {\n        const updatedComments = comments.map(comment => {\n            if (comment.id === id) {\n                return { ...comment, body: editTexts[id] };\n            }\n            return comment;\n        });\n        setComments(updatedComments);\n        setEditStatus({ ...editStatus, [id]: false });\n    };\n\n    const startEditReply = (replyId, currentText) => {\n        setEditingReplyId(replyId);\n        setEditReplyText({ ...editReplyText, [replyId]: currentText });\n    };\n\n    // Saves the reply changes\n    const saveReplyChanges = (replyId) => {\n        const updatedComments = comments.map(comment => {\n            if (comment.id === replyId) {\n                const updatedReplies = comment.replies.map(reply => {\n                    if (reply.id === replyId) {\n                        return { ...reply, body: editReplyText[replyId] };\n                    }\n                    return reply;\n                });\n                return { ...comment, replies: updatedReplies };\n            }\n            return comment;\n        });\n        setComments(updatedComments);\n        setEditingReplyId(null);\n        setEditReplyText({});\n    };\n\n\n    // CAPTION CODE\n\n      //Sends a POST request to the backend with the caption data\n      const saveCaptionToDatabase = async (username, captionText) => {\n        if(!captionText) return;\n\n        try {\n            const response = await axios.post(`http://localhost:8082/api/${username}/save-caption`, { caption: captionText });\n            console.log('Caption saved:', response.data);\n        } catch (error) {\n            console.error('Error saving the caption:', error.message);\n        }\n    };\n\n    //Function to handle \"Enter\" key in caption input\n    const handleCaptionKeyPress = async (e) => {\n        if(e.key === 'Enter')\n        {\n            e.preventDefault();\n            postCaption();\n            await saveCaptionToDatabase(username, caption);\n        }\n    }\n\n    //To make the caption permanent in the song card\n    const postCaption = () => {\n        console.log('Caption is posted: \"', caption, '\"');\n        setCaptionPosted(true);\n    }\n\n    //Caption input field\n    const captionInput = (\n        <input\n            type=\"text\"\n            className=\"caption-input\"\n            placeholder=\"Add a caption\"\n            value={caption}\n            onChange={(e) => setCaption(e.target.value)}\n            onKeyDown={handleCaptionKeyPress}\n        />\n    )\n\n    //JSX for caption display\n    const displayCaption = (\n        <div className=\"caption-display\">\n            <p>{caption}</p>\n        </div>\n    )\n\n    //If captionPosted is true, post is successful and returns display caption \n    //If captionPosted is false, it indicates that no caption has been posted \n    const captionRender = () => {\n        return captionPosted ? displayCaption : captionInput;\n    }\n\n\n    return (\n        <div className=\"home-page\">\n            <div className=\"button-container\">\n                {!posted && <button onClick={getRecentTrack}>Show Last Played Song</button>}\n            </div>\n            {recentTrack && (\n                <div className=\"post-card\">\n                    <div className=\"post-card-content\">\n                        <h2 className=\"song-title\">{recentTrack.title}</h2>\n                        <h3 className=\"artist-name\">{recentTrack.artist}</h3>\n                    </div>\n                    <div className=\"post-card-image-container\">\n                        <img src={recentTrack.albumCover} alt={`${recentTrack.title} Album Cover`} className=\"post-card-image\" />\n                        <StarRating onRating={(rate) => {\n                            console.log(\"Rating:\", rate);\n                        }} />\n                    </div>\n                    <div className=\"post-card-content\">\n                        {/* Render the caption input */}\n                        {captionRender()}\n                        {/* Render existing comments */}\n                        <div className=\"comments-container\">\n                            {comments.map(comment => (\n                                <div key={comment.id} className=\"comment-box\">\n                                    {editStatus[comment.id] ? (\n                                        <>\n                                            <input\n                                                value={editTexts[comment.id]}\n                                                onChange={(e) => setEditTexts({ ...editTexts, [comment.id]: e.target.value })}\n                                            />\n                                            <button onClick={() => handleSave(comment.id)}>Save</button>\n                                            <button onClick={() => handleCancel(comment.id)}>Cancel</button>\n                                        </>\n                                    ) : (\n                                        <>\n                                            <div className=\"comment-header\">\n                                                <strong>{comment.username}</strong>\n                                                <p>{comment.body}</p>\n                                                <small>{new Date(comment.date).toLocaleString()}</small>\n                                                <button className=\"comment-edit-button\" onClick={() => handleEdit(comment.id)}>Edit</button>\n                                            </div>\n                                            {comment.replies && comment.replies.map(reply => (\n                                                <div key={reply.id} className=\"reply-box\">\n                                                    <div className=\"reply-content\">\n                                                        <strong>{reply.username}</strong>\n                                                        {editingReplyId === reply.id ? (\n                                                            <input\n                                                                type=\"text\"\n                                                                value={editReplyText[reply.id] || reply.body}\n                                                                onChange={(e) => setEditReplyText({ ...editReplyText, [reply.id]: e.target.value })}\n                                                            />\n                                                        ) : (\n                                                            <p>{reply.body}</p>\n                                                        )}\n                                                        <small>{new Date(reply.date).toLocaleString()}</small>\n                                                        <button className=\"comment-edit-button\" onClick={() => startEditReply(reply.id, reply.body)}>Edit</button>\n                                                        {editingReplyId === reply.id && (\n                                                            <button onClick={() => saveReplyChanges(reply.id)}>Save</button>\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            ))}\n                                            <form onSubmit={(e) => handleReplySubmit(comment.id, e)}>\n                                                <input\n                                                    type=\"text\"\n                                                    placeholder=\"Reply...\"\n                                                    value={replyTexts[comment.id] || ''}\n                                                    onChange={(e) => setReplyTexts({ ...replyTexts, [comment.id]: e.target.value })}\n                                                />\n                                                <button type=\"submit\">Reply</button>\n                                            </form>\n                                        </>\n                                    )}\n                                </div>\n                            ))}\n                        </div>\n                        <form onSubmit={handleCommentSubmit}>\n                            <input\n                                type=\"text\"\n                                className=\"comment-input\"\n                                placeholder=\"Add a comment...\"\n                                value={newComment}\n                                onChange={(e) => setNewComment(e.target.value)}\n                            />\n                            <button type=\"submit\" className=\"submit-comment\">Comment</button>\n                        </form>\n                    </div>\n                </div>\n            )}\n        </div> \n    );\n\n\n}\n\n\n\nexport default Post;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}