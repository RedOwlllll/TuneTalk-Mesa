{"ast":null,"code":"var _jsxFileName = \"/Users/joelhillmann/Documents/GitHub/TuneTalk/tunetalk/src/pages/Home.js\";\nimport React from \"react\";\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \nimport \"../css/Post.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \n\nimport StarRating from \"./StarRating\";\nimport UserPost from \"./UserPost\";\nimport Post from \"./Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-display-form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Post, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n// export function Home() {\n\n//     //spotify api credentials and endpoints\n//     const CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\"\n//     const REDIRECT_URI = \"http://localhost:3000/home\"\n//     const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\n//     const RESPONSE_TYPE = \"token\"\n//     const SCOPES = \"user-read-recently-played\";\n\n//     //state hooks to store the token and recent song info\n//     const [token, setToken] = useState(\"\")\n//     const [recentTrack, setRecentTrack] = useState(null)\n//     const [comment, setComment] = useState('');\n//     const [posts, setPosts] = useState(null)\n\n//     //hook to process the authentication token after login\n//     useEffect(() => {\n//         const fetchPosts = async () => {\n//             const response = await fetch('/api/posts/')\n//             const json = await response.json()\n\n//             if (response.ok) {\n//                 setPosts(json)\n//             }\n//         }\n//         fetchPosts()\n\n//         const hash = window.location.hash;\n//         let token = window.localStorage.getItem(\"token\");\n\n//         //if no token in storage and there is a hash code, then store it\n//         if (!token && hash) {\n//             token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1];\n//             window.location.hash = \"\";\n//             window.localStorage.setItem(\"token\", token);\n//         }\n\n//         setToken(token); //updates the token\n//     }, []);\n\n//     // function to handle the user logout\n//     const logout = () => {\n//         setToken(\"\"); // Clear the token from state\n//         setRecentTrack(null); // Clear the recent track from state\n//         window.localStorage.removeItem(\"token\"); // Remove the token from localStorage\n//     };\n\n//     // function to construct the spotify login url\n//     const getLoginURL = () => {\n//         return `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${encodeURIComponent(SCOPES)}&show_dialog=true`;\n//     }\n\n//     const getRecentTrack = () => {\n//         if (!token) {\n//             console.log('No token available'); //log an error if no token is available\n//             return;\n//         }\n\n//         //make a get request to the spotify api\n//         axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\n//             headers: {\n//                 'Authorization': `Bearer ${token}` // set the autherization header with the token\n//             }\n//         })\n//             .then(response => {\n//                 const track = response.data.items[0].track; //extract track info from the response\n//                 //update the recentTrack state with the track details\n//                 setRecentTrack({\n//                     artist: track.artists.map(artist => artist.name).join(', '), //join multiple artists the a comma\n//                     title: track.name, //title \n//                     albumCover: track.album.images[0].url // URL of album image\n//                 });\n//             })\n//             .catch(error => {\n//                 console.log('Error fetching recent track:', error); //log any errors during the call\n//             });\n//     };\n\n//     const handleCommentSubmit = (e) => {\n//         e.preventDefault(); \n\n//         console.log(comment);\n\n//         setComment(''); // Clear the comment input after submission\n//     };\n\n//     //component render\n//     return (\n//         <div className=\"home-page\">\n\n//             <h1>Home</h1>\n//             {!token ?\n//                 <a href={getLoginURL()}>Login to Spotify</a>\n//                 : <button onClick={logout}>Logout</button>}\n\n//             <div className=\"button-container\">\n//                 <div className=\"button-box\">\n//                     <button onClick={getRecentTrack}>Show Last Played Song</button>\n//                 </div>\n//             </div>\n\n//             {/* Display the recent track information */}\n//             {recentTrack && (\n//                 <div className=\"post-card\">\n//                     <div className=\"post-card-content\">\n//                         <h2 className=\"song-title\">{recentTrack.title}</h2>\n//                         <h3 className=\"artist-name\">{recentTrack.artist}</h3>\n//                     </div>\n//                     <div className=\"post-card-image-container\">\n//                         <img src={recentTrack.albumCover} alt={`${recentTrack.title} Album Cover`} className=\"post-card-image\" />\n//                         <StarRating onRating={(rate) => console.log(rate)} />\n//                     </div>\n//                     <div className=\"post-card-content\">\n//                         {/* Comment form */}\n//                         <form onSubmit={handleCommentSubmit}>\n//                             <input\n//                                 type=\"text\"\n//                                 className=\"comment-input\"\n//                                 placeholder=\"Add a comment...\"\n//                                 value={comment}\n//                                 onChange={(e) => setComment(e.target.value)}\n//                             />\n//                             <button type=\"submit\" className=\"submit-comment\">Post</button>\n//                         </form>\n//                     </div>\n\n//                 </div>\n//             )}\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","StarRating","UserPost","Post","jsxDEV","_jsxDEV","Home","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joelhillmann/Documents/GitHub/TuneTalk/tunetalk/src/pages/Home.js"],"sourcesContent":["import React from \"react\";\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \nimport \"../css/Post.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \n\n\n   \nimport StarRating from \"./StarRating\";\n\nimport UserPost from \"./UserPost\";\nimport Post from \"./Post\";\n\n\nexport const Home = () => {\n    return (\n        <div>\n<           div className=\"song-display-form\">\n               \n            </div>\n\n            <div className=\"home-page\">\n                <h1>Home</h1> \n                <Post />\n            </div>\n        </div>\n        \n        \n    );\n}\n\n\n// export function Home() {\n\n//     //spotify api credentials and endpoints\n//     const CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\"\n//     const REDIRECT_URI = \"http://localhost:3000/home\"\n//     const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\n//     const RESPONSE_TYPE = \"token\"\n//     const SCOPES = \"user-read-recently-played\";\n\n//     //state hooks to store the token and recent song info\n//     const [token, setToken] = useState(\"\")\n//     const [recentTrack, setRecentTrack] = useState(null)\n//     const [comment, setComment] = useState('');\n//     const [posts, setPosts] = useState(null)\n\n//     //hook to process the authentication token after login\n//     useEffect(() => {\n//         const fetchPosts = async () => {\n//             const response = await fetch('/api/posts/')\n//             const json = await response.json()\n\n//             if (response.ok) {\n//                 setPosts(json)\n//             }\n//         }\n//         fetchPosts()\n\n//         const hash = window.location.hash;\n//         let token = window.localStorage.getItem(\"token\");\n\n//         //if no token in storage and there is a hash code, then store it\n//         if (!token && hash) {\n//             token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1];\n//             window.location.hash = \"\";\n//             window.localStorage.setItem(\"token\", token);\n//         }\n\n//         setToken(token); //updates the token\n//     }, []);\n\n//     // function to handle the user logout\n//     const logout = () => {\n//         setToken(\"\"); // Clear the token from state\n//         setRecentTrack(null); // Clear the recent track from state\n//         window.localStorage.removeItem(\"token\"); // Remove the token from localStorage\n//     };\n\n//     // function to construct the spotify login url\n//     const getLoginURL = () => {\n//         return `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${encodeURIComponent(SCOPES)}&show_dialog=true`;\n//     }\n\n//     const getRecentTrack = () => {\n//         if (!token) {\n//             console.log('No token available'); //log an error if no token is available\n//             return;\n//         }\n\n//         //make a get request to the spotify api\n//         axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\n//             headers: {\n//                 'Authorization': `Bearer ${token}` // set the autherization header with the token\n//             }\n//         })\n//             .then(response => {\n//                 const track = response.data.items[0].track; //extract track info from the response\n//                 //update the recentTrack state with the track details\n//                 setRecentTrack({\n//                     artist: track.artists.map(artist => artist.name).join(', '), //join multiple artists the a comma\n//                     title: track.name, //title \n//                     albumCover: track.album.images[0].url // URL of album image\n//                 });\n//             })\n//             .catch(error => {\n//                 console.log('Error fetching recent track:', error); //log any errors during the call\n//             });\n//     };\n\n//     const handleCommentSubmit = (e) => {\n//         e.preventDefault(); \n\n\n//         console.log(comment);\n\n//         setComment(''); // Clear the comment input after submission\n//     };\n\n//     //component render\n//     return (\n//         <div className=\"home-page\">\n        \n               \n//             <h1>Home</h1>\n//             {!token ?\n//                 <a href={getLoginURL()}>Login to Spotify</a>\n//                 : <button onClick={logout}>Logout</button>}\n\n//             <div className=\"button-container\">\n//                 <div className=\"button-box\">\n//                     <button onClick={getRecentTrack}>Show Last Played Song</button>\n//                 </div>\n//             </div>\n\n//             {/* Display the recent track information */}\n//             {recentTrack && (\n//                 <div className=\"post-card\">\n//                     <div className=\"post-card-content\">\n//                         <h2 className=\"song-title\">{recentTrack.title}</h2>\n//                         <h3 className=\"artist-name\">{recentTrack.artist}</h3>\n//                     </div>\n//                     <div className=\"post-card-image-container\">\n//                         <img src={recentTrack.albumCover} alt={`${recentTrack.title} Album Cover`} className=\"post-card-image\" />\n//                         <StarRating onRating={(rate) => console.log(rate)} />\n//                     </div>\n//                     <div className=\"post-card-content\">\n//                         {/* Comment form */}\n//                         <form onSubmit={handleCommentSubmit}>\n//                             <input\n//                                 type=\"text\"\n//                                 className=\"comment-input\"\n//                                 placeholder=\"Add a comment...\"\n//                                 value={comment}\n//                                 onChange={(e) => setComment(e.target.value)}\n//                             />\n//                             <button type=\"submit\" className=\"submit-comment\">Post</button>\n//                         </form>\n//                     </div>\n                    \n            \n//                 </div>\n//             )}\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,gBAAgB,CAAC,CAAC;AACzB,OAAO,iBAAiB,CAAC,CAAC;;AAI1B,OAAOC,UAAU,MAAM,cAAc;AAErC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACtB,oBACID,OAAA;IAAAE,QAAA,gBACRF,OAAA;MAAgBG,SAAS,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE5B,CAAC,eAENP,OAAA;MAAKG,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACtBF,OAAA;QAAAE,QAAA,EAAI;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbP,OAAA,CAACF,IAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAId,CAAC;;AAGD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAAAC,EAAA,GApJaP,IAAI;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}