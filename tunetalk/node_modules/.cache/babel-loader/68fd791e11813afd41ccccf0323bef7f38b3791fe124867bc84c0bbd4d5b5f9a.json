{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mesac\\\\OneDrive\\\\Documents\\\\GitHub\\\\TuneTalk\\\\tunetalk\\\\src\\\\pages\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \nimport \"../css/Post.css\";\nimport StarRating from \"./StarRating\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Post() {\n  _s();\n  //spotify api credentials and endpoints\n  const CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\";\n  const REDIRECT_URI = \"http://localhost:3000/home\";\n  const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n  const RESPONSE_TYPE = \"token\";\n  const SCOPES = \"user-read-recently-played\";\n\n  //state hooks to store the token and recent song info\n  const [token, setToken] = useState(\"\");\n  const [recentTrack, setRecentTrack] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n\n  // const email = \"1@gmail.com\";\n  const username = \"blake\";\n  const postId = \"662cd6c7d67dfd6255ff744f\";\n  const userId = \"662c4a7c5de6fd5dccedfde6\";\n\n  //hook to process the authentication token after login\n  useEffect(() => {\n    const hash = window.location.hash;\n    let token = window.localStorage.getItem(\"token\");\n\n    //if no token in storage and there is a hash code, then store it\n    if (!token && hash) {\n      token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1];\n      window.location.hash = \"\";\n      window.localStorage.setItem(\"token\", token);\n    }\n    setToken(token); //updates the token\n  }, []);\n\n  // function to handle the user logout\n  const logout = () => {\n    setToken(\"\"); // Clear the token from state\n    setRecentTrack(null); // Clear the recent track from state\n    window.localStorage.removeItem(\"token\"); // Remove the token from localStorage\n  };\n\n  // function to construct the spotify login url\n  const getLoginURL = () => {\n    return `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${encodeURIComponent(SCOPES)}&show_dialog=true`;\n  };\n  const getRecentTrack = () => {\n    if (!token) {\n      console.log('No token available'); //log an error if no token is available\n      return;\n    }\n\n    //make a get request to the spotify api\n    axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\n      headers: {\n        'Authorization': `Bearer ${token}` // set the autherization header with the token\n      }\n    }).then(response => {\n      const track = response.data.items[0].track; //extract track info from the response\n\n      //update the recentTrack state with the track details\n      setRecentTrack({\n        artist: track.artists.map(artist => artist.name).join(', '),\n        //join multiple artists the a comma\n        title: track.name,\n        //title \n        albumCover: track.album.images[0].url // URL of album image\n      });\n\n      //prepare song to be saved\n      const songData = {\n        title: track.name,\n        artist: track.artists.map(artist => artist.name).join(', '),\n        albumCover: track.album.images[0].url,\n        comments: [],\n        rating: StarRating\n      };\n      saveTrackToDatabase(userId, songData);\n    }).catch(error => {\n      console.log('Error fetching recent track:', error); //log any errors during the call\n    });\n  };\n  const saveTrackToDatabase = (userId, songData) => {\n    console.log(songData);\n    axios.post(`http://localhost:8082/api/user/${userId}/addPost`, songData).then(response => {\n      console.log('Song post saved:', response.data);\n    }).catch(error => {\n      console.error('Error saving the song post:', error.response.data);\n    });\n  };\n  const handleCommentSubmit = e => {\n    e.preventDefault();\n    const commentData = {\n      text: newComment,\n      userId: username\n    };\n    axios.post(`http://localhost:8082/api/songpost/${postId}/comments`, commentData).then(response => {\n      setComments([...comments, response.data]);\n      setNewComment('');\n    }).catch(error => {\n      var _error$response;\n      console.error(\"Error adding comment:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    });\n  };\n\n  // component render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-page\",\n    children: [!token ? /*#__PURE__*/_jsxDEV(\"a\", {\n      href: getLoginURL(),\n      children: \"Login to Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-box\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getRecentTrack,\n          children: \"Show Last Played Song\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), recentTrack && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"song-title\",\n          children: recentTrack.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"artist-name\",\n          children: recentTrack.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: recentTrack.albumCover,\n          alt: `${recentTrack.title} Album Cover`,\n          className: \"post-card-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(StarRating, {\n          onRating: rate => console.log(rate)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-container\",\n          children: comments.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: c.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: new Date(c.date).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 33\n            }, this)]\n          }, c.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleCommentSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"comment-input\",\n            placeholder: \"Add a comment...\",\n            value: newComment,\n            onChange: e => setNewComment(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-comment\",\n            children: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n_s(Post, \"jeDri2Wq0aruOAA+iADngHEJ5mU=\");\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useEffect","useState","axios","StarRating","jsxDEV","_jsxDEV","Post","_s","CLIENT_ID","REDIRECT_URI","AUTH_ENDPOINT","RESPONSE_TYPE","SCOPES","token","setToken","recentTrack","setRecentTrack","comments","setComments","newComment","setNewComment","username","postId","userId","hash","window","location","localStorage","getItem","substring","split","find","elem","startsWith","setItem","logout","removeItem","getLoginURL","encodeURIComponent","getRecentTrack","console","log","get","headers","then","response","track","data","items","artist","artists","map","name","join","title","albumCover","album","images","url","songData","rating","saveTrackToDatabase","catch","error","post","handleCommentSubmit","e","preventDefault","commentData","text","_error$response","message","className","children","href","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","onRating","rate","c","body","Date","date","toLocaleString","id","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/mesac/OneDrive/Documents/GitHub/TuneTalk/tunetalk/src/pages/Post.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \r\nimport \"../css/Post.css\";\r\nimport StarRating from \"./StarRating\";\r\n\r\nfunction Post() {\r\n\r\n    //spotify api credentials and endpoints\r\n    const CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\"\r\n    const REDIRECT_URI = \"http://localhost:3000/home\"\r\n    const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\r\n    const RESPONSE_TYPE = \"token\"\r\n    const SCOPES = \"user-read-recently-played\";\r\n\r\n    //state hooks to store the token and recent song info\r\n    const [token, setToken] = useState(\"\");\r\n    const [recentTrack, setRecentTrack] = useState(null);\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n  // const email = \"1@gmail.com\";\r\n    const username = \"blake\";\r\n    const postId = \"662cd6c7d67dfd6255ff744f\";\r\n    const userId = \"662c4a7c5de6fd5dccedfde6\";\r\n\r\n    //hook to process the authentication token after login\r\n    useEffect(() => {\r\n        const hash = window.location.hash;\r\n        let token = window.localStorage.getItem(\"token\");\r\n\r\n        //if no token in storage and there is a hash code, then store it\r\n        if (!token && hash) {\r\n            token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1];\r\n            window.location.hash = \"\";\r\n            window.localStorage.setItem(\"token\", token);\r\n        }\r\n\r\n        setToken(token); //updates the token\r\n    }, []);\r\n\r\n    // function to handle the user logout\r\n    const logout = () => {\r\n        setToken(\"\"); // Clear the token from state\r\n        setRecentTrack(null); // Clear the recent track from state\r\n        window.localStorage.removeItem(\"token\"); // Remove the token from localStorage\r\n    };\r\n\r\n    // function to construct the spotify login url\r\n    const getLoginURL = () => {\r\n        return `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${encodeURIComponent(SCOPES)}&show_dialog=true`;\r\n    }\r\n\r\n    const getRecentTrack = () => {\r\n        if (!token) {\r\n            console.log('No token available'); //log an error if no token is available\r\n            return;\r\n        }\r\n\r\n        //make a get request to the spotify api\r\n        axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}` // set the autherization header with the token\r\n            }\r\n        }).then(response => {\r\n                const track = response.data.items[0].track; //extract track info from the response\r\n    \r\n                //update the recentTrack state with the track details\r\n                setRecentTrack({\r\n                    artist: track.artists.map(artist => artist.name).join(', '), //join multiple artists the a comma\r\n                    title: track.name, //title \r\n                    albumCover: track.album.images[0].url // URL of album image\r\n                });\r\n \r\n                //prepare song to be saved\r\n                const songData = {\r\n                    title: track.name,\r\n                    artist: track.artists.map(artist => artist.name).join(', '),\r\n                    albumCover: track.album.images[0].url,                    \r\n                    comments: [],\r\n                    rating: StarRating,\r\n                }\r\n                \r\n                saveTrackToDatabase(userId, songData);\r\n\r\n            }).catch(error => {\r\n                console.log('Error fetching recent track:', error); //log any errors during the call\r\n            });\r\n    };\r\n\r\n    const saveTrackToDatabase = (userId, songData) => {\r\n        console.log(songData);\r\n        axios.post(`http://localhost:8082/api/user/${userId}/addPost`, songData )\r\n          .then(response => {\r\n            console.log('Song post saved:', response.data);\r\n          })\r\n          .catch(error => {\r\n            console.error('Error saving the song post:', error.response.data);\r\n          });\r\n        };\r\n\r\n    const handleCommentSubmit = (e) => {\r\n\r\n        e.preventDefault(); \r\n\r\n        const commentData = {\r\n            text: newComment,\r\n            userId: username\r\n        };\r\n\r\n        axios.post(`http://localhost:8082/api/songpost/${postId}/comments`, commentData)\r\n            .then(response => {\r\n                setComments([...comments, response.data]);\r\n                setNewComment('');\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error adding comment:\", error.response?.data || error.message);\r\n            })\r\n    };\r\n\r\n    // component render\r\n    return (\r\n        <div className=\"home-page\">\r\n            {!token ?\r\n                <a href={getLoginURL()}>Login to Spotify</a>\r\n                : <button onClick={logout}>Logout</button>}\r\n\r\n            <div className=\"button-container\">\r\n                <div className=\"button-box\">\r\n                    <button onClick={getRecentTrack}>Show Last Played Song</button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Display the recent track information */}\r\n            {recentTrack && (\r\n                <div className=\"post-card\">\r\n                    <div className=\"post-card-content\">\r\n                        <h2 className=\"song-title\">{recentTrack.title}</h2>\r\n                        <h3 className=\"artist-name\">{recentTrack.artist}</h3>\r\n                    </div>\r\n                    <div className=\"post-card-image-container\">\r\n                        <img src={recentTrack.albumCover} alt={`${recentTrack.title} Album Cover`} className=\"post-card-image\" />\r\n                        <StarRating onRating={(rate) => console.log(rate)} />\r\n                    </div>\r\n                    <div className=\"post-card-content\">\r\n                        {/* Render existing comments */}\r\n                        <div className=\"comments-container\">\r\n                        {comments.map((c) => (\r\n                            <div key={c.id} className=\"comment\">\r\n                                <p>{c.body}</p>\r\n                                <small>{new Date(c.date).toLocaleString()}</small>\r\n                            </div>\r\n                        ))}\r\n                        </div>\r\n                        {/* Comment form */}\r\n                        <form onSubmit={handleCommentSubmit}>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"comment-input\"\r\n                                placeholder=\"Add a comment...\"\r\n                                value={newComment}\r\n                                onChange={(e) => setNewComment(e.target.value)}\r\n                            />\r\n                            <button type=\"submit\" className=\"submit-comment\">Post</button>\r\n                        </form>\r\n                    </div>\r\n                \r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}