{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mesac\\\\OneDrive\\\\Documents\\\\GitHub\\\\TuneTalk\\\\tunetalk\\\\src\\\\authentication\\\\UserState.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/* File to check and handle user authentication - will be used for Navigation bar file */\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Object that represents the initial state of the user.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialUser = {\n  _id: null,\n  // Initialize _id as null\n  email: '',\n  username: '',\n  password: '',\n  spotifyAccount: '',\n  isAuthenticated: false\n};\n\n/* Passing initialUser object as the default value - if user info \r\n  is not inputted/not found, email, password, spotifyAccount etc. remain empty and authentication is false.\r\n*/\nconst UserContext = /*#__PURE__*/createContext(initialUser);\n\n// UserProvider component\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(initialUser => {\n    // Retrieve the user from localStorage if it exists\n    const storedUser = localStorage.getItem('user');\n    console.log(localStorage.getItem('user'));\n    return storedUser ? JSON.parse(storedUser) : initialUser; // KEEP THIS HERE OTHERWISE THE TUNETALK EMAIL AND USERNAME WILL NOT BE SAVED IN THE DROPDOWN MENU AFTER REDIRECTING TO ACCOUNT/SPOTIFY\n  });\n  // Effect to store user in localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('user', JSON.stringify(user));\n  }, [user]);\n\n  // Wrap children components with the user context provider\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: [user, setUser],\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook function to access user context\n_s(UserProvider, \"SFxyhGlw31UosiBHnMIEkCCDAAY=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n_s2(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","initialUser","_id","email","username","password","spotifyAccount","isAuthenticated","UserContext","UserProvider","children","_s","user","setUser","storedUser","localStorage","getItem","console","log","JSON","parse","setItem","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/mesac/OneDrive/Documents/GitHub/TuneTalk/tunetalk/src/authentication/UserState.js"],"sourcesContent":["/* File to check and handle user authentication - will be used for Navigation bar file */\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Object that represents the initial state of the user.\r\nconst initialUser = {\r\n  _id: null, // Initialize _id as null\r\n  email: '',\r\n  username: '',\r\n  password: '',\r\n  spotifyAccount: '',\r\n  isAuthenticated: false,\r\n};\r\n\r\n/* Passing initialUser object as the default value - if user info \r\n  is not inputted/not found, email, password, spotifyAccount etc. remain empty and authentication is false.\r\n*/\r\nconst UserContext = createContext(initialUser);\r\n\r\n// UserProvider component\r\nexport const UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState((initialUser) => {\r\n    // Retrieve the user from localStorage if it exists\r\n    const storedUser = localStorage.getItem('user');\r\n    console.log(localStorage.getItem('user'));\r\n    return storedUser ? JSON.parse(storedUser) : initialUser; // KEEP THIS HERE OTHERWISE THE TUNETALK EMAIL AND USERNAME WILL NOT BE SAVED IN THE DROPDOWN MENU AFTER REDIRECTING TO ACCOUNT/SPOTIFY\r\n  });\r\n  // Effect to store user in localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  }, [user]);\r\n\r\n\r\n  // Wrap children components with the user context provider\r\n  return (\r\n    <UserContext.Provider value={[user, setUser]}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook function to access user context\r\nexport const useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within a UserProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAG;EAClBC,GAAG,EAAE,IAAI;EAAE;EACXC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,EAAE;EACZC,cAAc,EAAE,EAAE;EAClBC,eAAe,EAAE;AACnB,CAAC;;AAED;AACA;AACA;AACA,MAAMC,WAAW,gBAAGb,aAAa,CAACM,WAAW,CAAC;;AAE9C;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAEI,WAAW,IAAK;IAChD;IACA,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/CC,OAAO,CAACC,GAAG,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzC,OAAOF,UAAU,GAAGK,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC,GAAGb,WAAW,CAAC,CAAC;EAC5D,CAAC,CAAC;EACF;EACAH,SAAS,CAAC,MAAM;IACdiB,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEF,IAAI,CAACG,SAAS,CAACV,IAAI,CAAC,CAAC;EACpD,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;;EAGV;EACA,oBACEZ,OAAA,CAACQ,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE,CAACZ,IAAI,EAAEC,OAAO,CAAE;IAAAH,QAAA,EAC1CA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAjB,EAAA,CArBaF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AAsBzB,OAAO,MAAMqB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGpC,UAAU,CAACY,WAAW,CAAC;EACvC,IAAI,CAACwB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}