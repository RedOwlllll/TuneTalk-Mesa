{"ast":null,"code":"var _jsxFileName = \"/Users/joelhillmann/Documents/GitHub/TuneTalk/tunetalk/src/pages/UserPost.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \nimport \"../css/Post.css\";\nimport StarRating from \"./StarRating\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserPost() {\n  _s();\n  //spotify api credentials and endpoints\n  // const CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\"\n  // const REDIRECT_URI = \"http://localhost:3000/home\"\n  // const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\n  // const RESPONSE_TYPE = \"token\"\n  // const SCOPES = \"user-read-recently-played\";\n\n  //state hooks to store the token and recent song info\n  // const [token, setToken] = useState(\"\");\n  const [recentTrack, setRecentTrack] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [postusername, setPostUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [title, setTitle] = useState('');\n  const [artist, setArtist] = useState('');\n  const [rating, setRating] = useState('');\n  const [caption, setCaption] = useState('');\n  const [error, setError] = useState(null);\n  const [imageData, setImageData] = useState('');\n  const [buttonActive, setButtonActive] = useState(false);\n  const [selectedRating, setSelectedRating] = useState(0); // State variable to store the selected rating\n\n  // Callback function to handle the rating change\n  const handleRatingChange = rate => {\n    setSelectedRating(rate);\n  };\n  const checkButtonAvailability = async () => {\n    try {\n      const response = await axios.get('/api/check-availability');\n      setButtonActive(response.data.active);\n    } catch (error) {\n      console.error('Error checking button availability:', error);\n      setButtonActive(false); // Ensure button is disabled on error\n    }\n  };\n\n  // useEffect to initiate the check on component mount and set an interval\n  useEffect(() => {\n    checkButtonAvailability();\n    const interval = setInterval(checkButtonAvailability, 60000); // Check every minute\n    return () => clearInterval(interval);\n  }, []);\n  const token = localStorage.getItem(\"access_token\");\n  const username = localStorage.getItem(\"userlogin\");\n  console.log(username);\n\n  // const testusername = 10;\n  // const testemail = 10;\n  // const testtitle = 10;\n  // const testartist = 10;\n  // const testrating = 10;\n\n  const getRecentTrack = () => {\n    if (!token) {\n      console.log('No token available'); //log an error if no token is available\n      return;\n    }\n\n    //make a get request to the spotify api\n    axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\n      headers: {\n        'Authorization': `Bearer ${token}` // set the autherization header with the token\n      }\n    }).then(response => {\n      const track = response.data.items[0].track; //extract track info from the response\n\n      //update the recentTrack state with the track details\n      setRecentTrack({\n        artist: track.artists.map(artist => artist.name).join(', '),\n        //join multiple artists the a comma\n        title: track.name,\n        //title \n        albumCover: track.album.images[0].url // URL of album image\n      });\n\n      // fetch(track.album.images[0].url)\n      // .then(response => response.blob())\n      // .then(blob => {\n      //     const reader = new FileReader();\n      //     reader.onloadend = () => {\n      //         const base64Data = reader.result; // Base64 string of the image\n      //         // Store the base64 string in state\n      //         setImageData(base64Data);\n      //     };\n      //     reader.readAsDataURL(blob);\n      // })\n      // .catch(error => {\n      //     console.log('Error fetching image:', error);\n      // });\n\n      //prepare song to be saved\n      const songData = {\n        title: track.name,\n        artist: track.artists.map(artist => artist.name).join(', '),\n        albumCover: track.album.images[0].url,\n        comments: [],\n        rating: StarRating\n      };\n      saveTrackToDatabase(username, songData);\n    }).catch(error => {\n      console.log('Error fetching recent track:', error); //log any errors during the call\n    });\n  };\n  const saveTrackToDatabase = (username, songData) => {\n    console.log(songData);\n    axios.post(`http://localhost:8082/api/user/${username}/addPost`, songData).then(response => {\n      console.log('Song post saved:', response.data);\n    }).catch(error => {\n      console.error('Error saving the song post:', error.response.data);\n    });\n  };\n\n  // const handleCommentSubmit = (e) => {\n\n  //     e.preventDefault(); \n\n  //     const commentData = {\n  //         text: newComment,\n  //         user: username\n  //     };\n\n  // };\n\n  // useEffect(() => {\n  //     if (recentTrack && recentTrack.albumCover) {\n  //         handleImageData(recentTrack.albumCover);\n  //     }\n  // }, [recentTrack]);\n\n  // const handleImageData = async (imageUrl) => {\n  //     const response = await fetch(track.album.images[0].url);\n  //     const blob = await response.blob();\n  //     const reader = new FileReader();\n  //     reader.onloadend = () => {\n  //         setImageData(reader.result);\n  //         console.log(imageData)\n  //     };\n  //     reader.readAsDataURL(blob);\n  // };\n\n  const handleSubmission = async e => {\n    const confirmation = window.confirm(\"Are you sure you want to post this song? (All your friends will see)\");\n    if (confirmation) {\n      setRating(selectedRating);\n      //e.preventDefault()\n      const post = {\n        postusername,\n        imageData,\n        email,\n        title,\n        artist,\n        rating,\n        caption\n      };\n      console.log(post);\n      const response = await fetch('/api/posts', {\n        method: 'POST',\n        body: JSON.stringify(post),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const json = await response.json();\n      if (!response.ok) {\n        setError(json.error);\n      }\n      if (response.ok) {\n        // setPostUsername('')\n        // setEmail('')\n        // setTitle('')\n        // setArtist('')\n        // setRating('')\n        // setCaption('')\n\n        setError(null);\n        console.log('post added');\n      }\n    }\n\n    // console.log(postusername)\n    // console.log(rating)\n    // console.log(caption)\n\n    // setPostUsername('test');\n    // setEmail('test');\n    // setTitle('test');\n    // setArtist('test');\n    // setRating(1);\n    // setCaption('test');\n\n    // console.log(postusername)\n    // console.log(rating)\n    // console.log(caption)\n\n    //const post = {username,email,title,artist,rating,caption}\n\n    // const post = {postusername,email,title,artist,rating,caption}\n\n    // console.log(postusername)\n    // console.log(rating)\n    // console.log(caption)\n\n    // setPostUsername('test');\n    // setEmail('test');\n    // setTitle('test');\n    // setArtist('test');\n    // setRating('1');\n    // setCaption('test');\n  };\n\n  // component render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-box\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getRecentTrack,\n          children: \"POST NOW!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), recentTrack && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"song-title\",\n          children: recentTrack.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"artist-name\",\n          children: recentTrack.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: recentTrack.albumCover,\n          alt: `${recentTrack.title} Album Cover`,\n          className: \"post-card-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(StarRating, {\n          onRating: rate => {\n            console.log(rate);\n            setSelectedRating(rate);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-container\",\n          children: comments.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: c.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: new Date(c.date).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 33\n            }, this)]\n          }, c.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmission,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"comment-input\",\n            placeholder: \"Add a caption...\",\n            value: caption,\n            onChange: e => {\n              setCaption(e.target.value);\n              setPostUsername(username);\n              setEmail(username);\n              setTitle(recentTrack.title);\n              setArtist(recentTrack.artist);\n              setImageData();\n              setRating(selectedRating);\n              fetch(recentTrack.albumCover).then(response => response.blob()).then(blob => {\n                const reader = new FileReader();\n                reader.onloadend = () => {\n                  const base64Data = reader.result; // Base64 string of the image\n                  // Store the base64 string in state\n                  setImageData(base64Data);\n                  console.log(base64Data);\n                };\n                reader.readAsDataURL(blob);\n              }).catch(error => {\n                console.log('Error fetching image:', error);\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-comment\",\n            children: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n}\n_s(UserPost, \"jDsE6F1JtdX7X0HYtwJ24LhRLtA=\");\n_c = UserPost;\nexport default UserPost;\nvar _c;\n$RefreshReg$(_c, \"UserPost\");","map":{"version":3,"names":["React","useEffect","useState","axios","StarRating","jsxDEV","_jsxDEV","UserPost","_s","recentTrack","setRecentTrack","comments","setComments","newComment","setNewComment","postusername","setPostUsername","email","setEmail","title","setTitle","artist","setArtist","rating","setRating","caption","setCaption","error","setError","imageData","setImageData","buttonActive","setButtonActive","selectedRating","setSelectedRating","handleRatingChange","rate","checkButtonAvailability","response","get","data","active","console","interval","setInterval","clearInterval","token","localStorage","getItem","username","log","getRecentTrack","headers","then","track","items","artists","map","name","join","albumCover","album","images","url","songData","saveTrackToDatabase","catch","post","handleSubmission","e","confirmation","window","confirm","fetch","method","body","JSON","stringify","json","ok","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onRating","c","Date","date","toLocaleString","id","onSubmit","type","placeholder","value","onChange","target","blob","reader","FileReader","onloadend","base64Data","result","readAsDataURL","_c","$RefreshReg$"],"sources":["/Users/joelhillmann/Documents/GitHub/TuneTalk/tunetalk/src/pages/UserPost.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \nimport \"../css/Post.css\";\nimport StarRating from \"./StarRating\";\n\nfunction UserPost() {\n\n    //spotify api credentials and endpoints\n    // const CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\"\n    // const REDIRECT_URI = \"http://localhost:3000/home\"\n    // const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\n    // const RESPONSE_TYPE = \"token\"\n    // const SCOPES = \"user-read-recently-played\";\n\n    //state hooks to store the token and recent song info\n    // const [token, setToken] = useState(\"\");\n    const [recentTrack, setRecentTrack] = useState(null);\n    const [comments, setComments] = useState([]);\n    const [newComment, setNewComment] = useState('');\n\n    const [postusername, setPostUsername] = useState('')\n    const [email, setEmail] = useState('')\n    const [title, setTitle] = useState('')\n    const [artist, setArtist] = useState('')\n    const [rating, setRating] = useState('')\n    const [caption, setCaption] = useState('')\n    const [error, setError] = useState(null)\n    const [imageData, setImageData] = useState('');\n    const [buttonActive, setButtonActive] = useState(false);\n\n\n\n    const [selectedRating, setSelectedRating] = useState(0); // State variable to store the selected rating\n\n    // Callback function to handle the rating change\n    const handleRatingChange = (rate) => {\n        setSelectedRating(rate);\n    };\n\n    const checkButtonAvailability = async () => {\n        try {\n            const response = await axios.get('/api/check-availability');\n            setButtonActive(response.data.active);\n        } catch (error) {\n            console.error('Error checking button availability:', error);\n            setButtonActive(false); // Ensure button is disabled on error\n        }\n    };\n    \n    // useEffect to initiate the check on component mount and set an interval\n    useEffect(() => {\n        checkButtonAvailability();\n        const interval = setInterval(checkButtonAvailability, 60000); // Check every minute\n        return () => clearInterval(interval);\n    }, []);\n    \n\n    const token = localStorage.getItem(\"access_token\");\n    const username = localStorage.getItem(\"userlogin\");\n\n    console.log(username);\n\n\n  \n\n    // const testusername = 10;\n    // const testemail = 10;\n    // const testtitle = 10;\n    // const testartist = 10;\n    // const testrating = 10;\n\n    const getRecentTrack = () => {\n\n\n        if (!token) {\n            console.log('No token available'); //log an error if no token is available\n            return;\n        }\n\n        //make a get request to the spotify api\n        axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\n            headers: {\n                'Authorization': `Bearer ${token}` // set the autherization header with the token\n            }\n        }).then(response => {\n                const track = response.data.items[0].track; //extract track info from the response\n    \n                //update the recentTrack state with the track details\n                setRecentTrack({\n                    artist: track.artists.map(artist => artist.name).join(', '), //join multiple artists the a comma\n                    title: track.name, //title \n                    albumCover: track.album.images[0].url // URL of album image\n                });\n\n                \n                \n\n\n                // fetch(track.album.images[0].url)\n                // .then(response => response.blob())\n                // .then(blob => {\n                //     const reader = new FileReader();\n                //     reader.onloadend = () => {\n                //         const base64Data = reader.result; // Base64 string of the image\n                //         // Store the base64 string in state\n                //         setImageData(base64Data);\n                //     };\n                //     reader.readAsDataURL(blob);\n                // })\n                // .catch(error => {\n                //     console.log('Error fetching image:', error);\n                // });\n\n                \n                //prepare song to be saved\n                const songData = {\n                    title: track.name,\n                    artist: track.artists.map(artist => artist.name).join(', '),\n                    albumCover: track.album.images[0].url,                    \n                    comments: [],\n                    rating: StarRating,\n                }\n                \n                saveTrackToDatabase(username, songData);\n\n            }).catch(error => {\n                console.log('Error fetching recent track:', error); //log any errors during the call\n            });\n    };\n\n    const saveTrackToDatabase = (username, songData) => {\n        console.log(songData);\n        axios.post(`http://localhost:8082/api/user/${username}/addPost`, songData )\n          .then(response => {\n            console.log('Song post saved:', response.data);\n          })\n          .catch(error => {\n            console.error('Error saving the song post:', error.response.data);\n          });\n        };\n\n    // const handleCommentSubmit = (e) => {\n\n    //     e.preventDefault(); \n\n    //     const commentData = {\n    //         text: newComment,\n    //         user: username\n    //     };\n\n     \n    // };\n\n   \n\n    // useEffect(() => {\n    //     if (recentTrack && recentTrack.albumCover) {\n    //         handleImageData(recentTrack.albumCover);\n    //     }\n    // }, [recentTrack]);\n\n    // const handleImageData = async (imageUrl) => {\n    //     const response = await fetch(track.album.images[0].url);\n    //     const blob = await response.blob();\n    //     const reader = new FileReader();\n    //     reader.onloadend = () => {\n    //         setImageData(reader.result);\n    //         console.log(imageData)\n    //     };\n    //     reader.readAsDataURL(blob);\n    // };\n\n\n\n    const handleSubmission = async (e) =>{\n\n        const confirmation = window.confirm(\"Are you sure you want to post this song? (All your friends will see)\");\n\n        if (confirmation) {\n            \n            setRating(selectedRating);\n            //e.preventDefault()\n            const post = {postusername,imageData,email,title,artist,rating,caption}\n\n            console.log(post)\n\n            const response = await fetch('/api/posts', {\n                method: 'POST', \n                body: JSON.stringify(post),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            \n            })\n    \n            const json = await response.json()\n            if (!response.ok) {\n                setError(json.error)\n            }\n    \n            if (response.ok) {\n                // setPostUsername('')\n                // setEmail('')\n                // setTitle('')\n                // setArtist('')\n                // setRating('')\n                // setCaption('')\n    \n                setError(null)\n                console.log('post added')\n            }\n        }\n\n        \n        // console.log(postusername)\n        // console.log(rating)\n        // console.log(caption)\n\n       \n\n       \n        // setPostUsername('test');\n        // setEmail('test');\n        // setTitle('test');\n        // setArtist('test');\n        // setRating(1);\n        // setCaption('test');\n       \n        \n        // console.log(postusername)\n        // console.log(rating)\n        // console.log(caption)\n\n       \n\n        //const post = {username,email,title,artist,rating,caption}\n\n        \n        \n        // const post = {postusername,email,title,artist,rating,caption}\n\n\n        // console.log(postusername)\n        // console.log(rating)\n        // console.log(caption)\n\n       \n        \n        // setPostUsername('test');\n        // setEmail('test');\n        // setTitle('test');\n        // setArtist('test');\n        // setRating('1');\n        // setCaption('test');\n\n       \n\n    }\n\n    // component render\n    return (\n        <div className=\"home-page\">\n            {/* {!token ?\n                <a href={getLoginURL()}>Login to Spotify</a>\n                : <button onClick={logout}>Logout</button>} */}\n\n            <div className=\"button-container\">\n                <div className=\"button-box\">\n                    <button onClick={getRecentTrack}>POST NOW!</button>\n                </div>\n            </div>\n\n            {/* Display the recent track information */}\n            {recentTrack && (\n                <div className=\"post-card\">\n                    <div className=\"post-card-content\">\n                        <h2 className=\"song-title\">{recentTrack.title}</h2>\n                        <h3 className=\"artist-name\">{recentTrack.artist}</h3>\n                    </div>\n                    <div className=\"post-card-image-container\">\n                        <img src={recentTrack.albumCover} alt={`${recentTrack.title} Album Cover`} className=\"post-card-image\" />\n                        <StarRating onRating={(rate) => {console.log(rate); setSelectedRating(rate)}} />\n                    </div>\n                    <div className=\"post-card-content\">\n                        {/* Render existing comments */}\n                        <div className=\"comments-container\">\n                        {comments.map((c) => (\n                            <div key={c.id} className=\"comment\">\n                                <p>{c.body}</p>\n                                <small>{new Date(c.date).toLocaleString()}</small>\n                            </div>\n                        ))}\n                        </div>\n                        {/* Caption form */}\n                        <form onSubmit={handleSubmission}>\n                            <input\n                                type=\"text\"\n                                className=\"comment-input\"\n                                placeholder=\"Add a caption...\"\n                                value={caption}\n                                onChange={(e) => {\n                                    setCaption(e.target.value)\n                                    setPostUsername(username);\n                                    setEmail(username);\n                                    setTitle(recentTrack.title);\n                                    setArtist(recentTrack.artist);\n                                    setImageData()\n                                    setRating(selectedRating);\n                                    fetch(recentTrack.albumCover).then(response => response.blob()).then(blob => \n                                    {\n                                        const reader = new FileReader();\n                                        reader.onloadend = () => {\n                                            const base64Data = reader.result; // Base64 string of the image\n                                            // Store the base64 string in state\n                                            setImageData(base64Data);\n                                            console.log(base64Data)\n                                        };\n                                        reader.readAsDataURL(blob);\n                                    })\n                                    .catch(error => {\n                                        console.log('Error fetching image:', error);\n                                    })\n                                \n                                \n                                }}\n                                \n                            />\n                            <button type=\"submit\" className=\"submit-comment\">Post</button>\n                        </form>\n\n                \n\n\n\n\n                    </div>\n                \n                </div>\n            )}\n        </div> \n    );\n}\n\nexport default UserPost;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}