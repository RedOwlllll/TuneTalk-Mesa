{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tabit\\\\OneDrive - AUT University\\\\Documents\\\\GitHub\\\\TuneTalk\\\\tunetalk\\\\src\\\\pages\\\\UserAccount\\\\SpotifyLogin.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\n//import { useUser } from \"../UserState\";\n//import { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\"; // Client ID where\nconst SPOTIFY_AUTH = \"https://accounts.spotify.com/authorize\"; // Base url where we make the authorization request to spottify\nconst REDIRECT_URI = \"http://localhost:3000/home\"; // url after login successful\nconst SPACE_ENCODE = \"%20\"; // %20 represents a space in urls\n\n/*\r\n    Spotify scope array that allows us to get all neccesary data from the user's spotify acc\r\n    Link to definitions of scopes: https://developer.spotify.com/documentation/web-api/concepts/scopes\r\n    (note: using all scopes except the soa ones as it would end up as an illegal scope).\r\n*/\nconst spotifyScopes = ['ugc-image-upload', 'user-read-playback-state', 'user-modify-playback-state', 'user-read-currently-playing', 'app-remote-control', 'streaming', 'playlist-read-private', 'playlist-read-collaborative', 'playlist-modify-private', 'playlist-modify-public', 'user-follow-modify', 'user-follow-read', 'user-read-playback-position', 'user-top-read', 'user-read-recently-played', 'user-library-modify', 'user-library-read', 'user-read-email', 'user-read-private'];\nconst SCOPES_URL_PARAM = spotifyScopes.join(SPACE_ENCODE); // Joining all the scopes together by using the SPACE_ENCODE variable that performs percent coding and represents the space in the url.  \n\n// Function that returns the access token once user is authenticated \n_c = SCOPES_URL_PARAM;\nexport const getTokenAfterAuth = hash => {\n  const stringAfterHashtag = hash.substring(1);\n  const paramsInUrl = stringAfterHashtag.split(\"&\").reduce((accumulater, currentValue) => {\n    console.log(currentValue);\n    const [key, value] = currentValue.split(\"=\");\n    accumulater[key] = value;\n    return accumulater;\n  }, {});\n  return paramsInUrl;\n};\n\n// Call in the menu class\nexport const SpotifyLogin = () => {\n  _s();\n  useEffect(() => {\n    if (window.location.hash) {\n      const {\n        access_token,\n        expires_in,\n        token_type\n      } = getTokenAfterAuth(window.location.hash);\n      localStorage.clear();\n      localStorage.setItem(\"accessToken\", access_token);\n      localStorage.setItem(\"tokenType\", token_type);\n      localStorage.setItem(\"expiresIn\", expires_in);\n    }\n  });\n  const handleLogin = async () => {\n    window.location = `${SPOTIFY_AUTH}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=${SCOPES_URL_PARAM}&response_type=token&show_dialogue=true`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spotify-login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Connect your Spotify Account with TuneTalk!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login with Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(SpotifyLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = SpotifyLogin;\nvar _c, _c2;\n$RefreshReg$(_c, \"SCOPES_URL_PARAM\");\n$RefreshReg$(_c2, \"SpotifyLogin\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","CLIENT_ID","SPOTIFY_AUTH","REDIRECT_URI","SPACE_ENCODE","spotifyScopes","SCOPES_URL_PARAM","join","_c","getTokenAfterAuth","hash","stringAfterHashtag","substring","paramsInUrl","split","reduce","accumulater","currentValue","console","log","key","value","SpotifyLogin","_s","window","location","access_token","expires_in","token_type","localStorage","clear","setItem","handleLogin","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/tabit/OneDrive - AUT University/Documents/GitHub/TuneTalk/tunetalk/src/pages/UserAccount/SpotifyLogin.js"],"sourcesContent":["import { useEffect } from \"react\";\r\n//import { useUser } from \"../UserState\";\r\n//import { useNavigate } from \"react-router-dom\";\r\n\r\nconst CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\"; // Client ID where\r\nconst SPOTIFY_AUTH = \"https://accounts.spotify.com/authorize\"; // Base url where we make the authorization request to spottify\r\nconst REDIRECT_URI = \"http://localhost:3000/home\"; // url after login successful\r\nconst SPACE_ENCODE = \"%20\"; // %20 represents a space in urls\r\n\r\n/*\r\n    Spotify scope array that allows us to get all neccesary data from the user's spotify acc\r\n    Link to definitions of scopes: https://developer.spotify.com/documentation/web-api/concepts/scopes\r\n    (note: using all scopes except the soa ones as it would end up as an illegal scope).\r\n*/ \r\nconst spotifyScopes = [\r\n    'ugc-image-upload',\r\n    'user-read-playback-state',\r\n    'user-modify-playback-state',\r\n    'user-read-currently-playing',\r\n    'app-remote-control',\r\n    'streaming', \r\n    'playlist-read-private',\r\n    'playlist-read-collaborative',\r\n    'playlist-modify-private',\r\n    'playlist-modify-public',\r\n    'user-follow-modify',\r\n    'user-follow-read',\r\n    'user-read-playback-position',\r\n    'user-top-read',\r\n    'user-read-recently-played',\r\n    'user-library-modify',\r\n    'user-library-read',\r\n    'user-read-email',\r\n    'user-read-private',\r\n];\r\nconst SCOPES_URL_PARAM = spotifyScopes.join(SPACE_ENCODE); // Joining all the scopes together by using the SPACE_ENCODE variable that performs percent coding and represents the space in the url.  \r\n\r\n// Function that returns the access token once user is authenticated \r\nexport const getTokenAfterAuth = (hash) => {\r\n    const stringAfterHashtag = hash.substring(1);\r\n    const paramsInUrl = stringAfterHashtag.split(\"&\").reduce((accumulater, currentValue) => {\r\n        console.log(currentValue);\r\n        const [key, value] = currentValue.split(\"=\");\r\n        accumulater[key] = value;\r\n        return accumulater;\r\n  }, {});\r\n\r\n  return paramsInUrl;\r\n};\r\n\r\n\r\n// Call in the menu class\r\nexport const SpotifyLogin = () => {\r\n    \r\n    useEffect(() => {\r\n        if (window.location.hash) {\r\n          const { access_token, expires_in, token_type } =\r\n          getTokenAfterAuth(window.location.hash);\r\n    \r\n          localStorage.clear();\r\n\r\n          localStorage.setItem(\"accessToken\", access_token);\r\n          localStorage.setItem(\"tokenType\", token_type);\r\n          localStorage.setItem(\"expiresIn\", expires_in);\r\n        }\r\n      });\r\n    \r\n    const handleLogin = async () => {\r\n        window.location = `${SPOTIFY_AUTH}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=${SCOPES_URL_PARAM}&response_type=token&show_dialogue=true`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"spotify-login-container\">\r\n            <p>Connect your Spotify Account with TuneTalk!</p>\r\n            \r\n            <button onClick={handleLogin}>Login with Spotify</button> {/* Render a button for initiating the login process */}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}