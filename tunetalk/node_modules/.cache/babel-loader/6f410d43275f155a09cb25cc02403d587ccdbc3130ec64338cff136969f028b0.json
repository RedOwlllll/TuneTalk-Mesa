{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mesac\\\\OneDrive\\\\Documents\\\\GitHub\\\\TuneTalk\\\\tunetalk\\\\src\\\\pages\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \nimport \"../css/Post.css\";\nimport StarRating from \"./StarRating\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Post() {\n  _s();\n  //spotify api credentials and endpoints\n  // const CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\"\n  // const REDIRECT_URI = \"http://localhost:3000/home\"\n  // const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\n  // const RESPONSE_TYPE = \"token\"\n  // const SCOPES = \"user-read-recently-played\";\n\n  //state hooks to store the token and recent song info\n  // const [token, setToken] = useState(\"\");\n  const [recentTrack, setRecentTrack] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [caption, setCaption] = useState('');\n  const [captionPosted, setCaptionPosted] = useState(false);\n  const token = localStorage.getItem(\"access_token\");\n  const username = localStorage.getItem(\"userlogin\");\n  console.log(token, username);\n  /* const email = \"1@gmail.com\";\r\n    const username = \"blake\";\r\n    const postId = \"662cd6c7d67dfd6255ff744f\";\r\n    const user = \"662c4a7c5de6fd5dccedfde6\";\r\n    */\n\n  // const email = \"1@gmail.com\";\n  // const username = \"blake\";\n  // const postId = \"662cd6c7d67dfd6255ff744f\";\n  // const user = \"662c4a7c5de6fd5dccedfde6\";\n\n  //hook to process the authentication token after login\n  // useEffect(() => {\n  //     const hash = window.location.hash;\n  //     let token = window.localStorage.getItem(\"token\");\n\n  //     //if no token in storage and there is a hash code, then store it\n  //     if (!token && hash) {\n  //         token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1];\n  //         window.location.hash = \"\";\n  //         window.localStorage.setItem(\"token\", token);\n  //     }\n\n  //     setToken(token); //updates the token\n  // }, []);\n\n  // function to handle the user logout\n  // const logout = () => {\n  //     setToken(\"\"); // Clear the token from state\n  //     setRecentTrack(null); // Clear the recent track from state\n  //     window.localStorage.removeItem(\"token\"); // Remove the token from localStorage\n  // };\n\n  // // function to construct the spotify login url\n  // const getLoginURL = () => {\n  //     return `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${encodeURIComponent(SCOPES)}&show_dialog=true`;\n  // }\n\n  const getRecentTrack = () => {\n    if (!token) {\n      console.log('No token available'); //log an error if no token is available\n      return;\n    }\n\n    //make a get request to the spotify api\n    axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\n      headers: {\n        'Authorization': `Bearer ${token}` // set the autherization header with the token\n      }\n    }).then(response => {\n      const track = response.data.items[0].track; //extract track info from the response\n\n      //axios.get('http://localhost:8082/api/caption/${track.id}')\n      //update the recentTrack state with the track details\n      setRecentTrack({\n        artist: track.artists.map(artist => artist.name).join(', '),\n        //join multiple artists the a comma\n        title: track.name,\n        //title \n        albumCover: track.album.images[0].url,\n        // URL of album image\n        caption: caption\n      });\n\n      //prepare song to be saved\n      const songData = {\n        title: track.name,\n        artist: track.artists.map(artist => artist.name).join(', '),\n        albumCover: track.album.images[0].url,\n        comments: [],\n        rating: StarRating,\n        caption: caption\n      };\n      saveTrackToDatabase(username, songData);\n    }).catch(error => {\n      console.log('Error fetching recent track:', error); //log any errors during the call\n    });\n  };\n  const saveTrackToDatabase = (username, songData) => {\n    console.log(songData);\n    axios.post(`http://localhost:8082/api/user/${username}/addPost`, songData).then(response => {\n      console.log('Song post saved:', response.data);\n    }).catch(error => {\n      console.error('Error saving the song post:', error.response.data);\n    });\n  };\n  const handleCommentSubmit = e => {\n    e.preventDefault();\n    const commentData = {\n      text: newComment,\n      user: username\n    };\n\n    // axios.post(`http://localhost:8082/api/songpost/${postId}/comments`, commentData)\n    //     .then(response => {\n    //         setComments([...comments, response.data]);\n    //         setNewComment('');\n    //     })\n    //     .catch(error => {\n    //         console.error(\"Error adding comment:\", error.response?.data || error.message);\n    //     })\n  };\n\n  //Sends a POST request to the backend with the caption data\n  const saveCaptionToDatabase = async caption => {\n    if (!caption) return;\n    try {\n      const response = await axios.post('http://localhost:8082/api/save-caption', {\n        setCaption\n      });\n      console.log('Caption saved:', response.data);\n      setCaption(true);\n    } catch (error) {\n      console.error('Error saving the caption:', error.message);\n    }\n  };\n\n  //Function to handle \"Enter\" key in caption input\n  const handleCaptionKeyPress = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      postCaption();\n      saveCaptionToDatabase(caption);\n    }\n  };\n\n  //Function to save the caption\n  const postCaption = () => {\n    console.log('Caption is posted: \"', caption, '\"');\n    setCaptionPosted(true);\n  };\n\n  //Caption input field\n  const captionInput = /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    className: \"caption-input\",\n    placeholder: \"Add a caption\",\n    value: caption,\n    onChange: e => setCaption(e.target.value),\n    onKeyDown: handleCaptionKeyPress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n\n  //JSX for caption display\n  const displayCaption = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"caption-display\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n\n  //Depending on the captionPosted status, render the caption display or the caption input\n  const captionRender = () => {\n    return captionPosted ? displayCaption : captionInput;\n  };\n\n  // component render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-box\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getRecentTrack,\n          children: \"Show Last Played Song\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), recentTrack && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"song-title\",\n          children: recentTrack.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"artist-name\",\n          children: recentTrack.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: recentTrack.albumCover,\n          alt: `${recentTrack.title} Album Cover`,\n          className: \"post-card-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(StarRating, {\n          onRating: rate => console.log(rate)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card-content\",\n        children: [captionRender(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-container\",\n          children: comments.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: c.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: new Date(c.date).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 33\n            }, this)]\n          }, c.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleCommentSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"comment-input\",\n            placeholder: \"Add a comment...\",\n            value: newComment,\n            onChange: e => setNewComment(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-comment\",\n            children: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n}\n_s(Post, \"t9Vv6E9k4cxGbdSyEOCVmxstZBg=\");\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useEffect","useState","axios","StarRating","jsxDEV","_jsxDEV","Post","_s","recentTrack","setRecentTrack","comments","setComments","newComment","setNewComment","caption","setCaption","captionPosted","setCaptionPosted","token","localStorage","getItem","username","console","log","getRecentTrack","get","headers","then","response","track","data","items","artist","artists","map","name","join","title","albumCover","album","images","url","songData","rating","saveTrackToDatabase","catch","error","post","handleCommentSubmit","e","preventDefault","commentData","text","user","saveCaptionToDatabase","message","handleCaptionKeyPress","key","postCaption","captionInput","type","className","placeholder","value","onChange","target","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","displayCaption","children","captionRender","onClick","src","alt","onRating","rate","c","body","Date","date","toLocaleString","id","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/mesac/OneDrive/Documents/GitHub/TuneTalk/tunetalk/src/pages/Post.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport \"../css/App.css\"; // NOTE: put 2 . (\"..\") since this file is in it's own folder too. \r\nimport \"../css/Post.css\";\r\nimport StarRating from \"./StarRating\";\r\n\r\nfunction Post() {\r\n\r\n    //spotify api credentials and endpoints\r\n    // const CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\"\r\n    // const REDIRECT_URI = \"http://localhost:3000/home\"\r\n    // const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\r\n    // const RESPONSE_TYPE = \"token\"\r\n    // const SCOPES = \"user-read-recently-played\";\r\n\r\n    //state hooks to store the token and recent song info\r\n    // const [token, setToken] = useState(\"\");\r\n    const [recentTrack, setRecentTrack] = useState(null);\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [caption, setCaption] = useState('');\r\n    const [captionPosted, setCaptionPosted] = useState(false);\r\n\r\n    const token = localStorage.getItem(\"access_token\");\r\n    const username = localStorage.getItem(\"userlogin\");\r\n\r\n    console.log(token, username);\r\n  /* const email = \"1@gmail.com\";\r\n    const username = \"blake\";\r\n    const postId = \"662cd6c7d67dfd6255ff744f\";\r\n    const user = \"662c4a7c5de6fd5dccedfde6\";\r\n    */\r\n\r\n    // const email = \"1@gmail.com\";\r\n    // const username = \"blake\";\r\n    // const postId = \"662cd6c7d67dfd6255ff744f\";\r\n    // const user = \"662c4a7c5de6fd5dccedfde6\";\r\n\r\n    //hook to process the authentication token after login\r\n    // useEffect(() => {\r\n    //     const hash = window.location.hash;\r\n    //     let token = window.localStorage.getItem(\"token\");\r\n\r\n    //     //if no token in storage and there is a hash code, then store it\r\n    //     if (!token && hash) {\r\n    //         token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1];\r\n    //         window.location.hash = \"\";\r\n    //         window.localStorage.setItem(\"token\", token);\r\n    //     }\r\n\r\n    //     setToken(token); //updates the token\r\n    // }, []);\r\n\r\n    // function to handle the user logout\r\n    // const logout = () => {\r\n    //     setToken(\"\"); // Clear the token from state\r\n    //     setRecentTrack(null); // Clear the recent track from state\r\n    //     window.localStorage.removeItem(\"token\"); // Remove the token from localStorage\r\n    // };\r\n\r\n    // // function to construct the spotify login url\r\n    // const getLoginURL = () => {\r\n    //     return `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${encodeURIComponent(SCOPES)}&show_dialog=true`;\r\n    // }\r\n\r\n    const getRecentTrack = () => {\r\n        if (!token) {\r\n            console.log('No token available'); //log an error if no token is available\r\n            return;\r\n        }\r\n\r\n        //make a get request to the spotify api\r\n        axios.get('https://api.spotify.com/v1/me/player/recently-played?limit=1', {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}` // set the autherization header with the token\r\n            }\r\n        }).then(response => {\r\n                const track = response.data.items[0].track; //extract track info from the response\r\n    \r\n                //axios.get('http://localhost:8082/api/caption/${track.id}')\r\n                //update the recentTrack state with the track details\r\n                setRecentTrack({\r\n                    artist: track.artists.map(artist => artist.name).join(', '), //join multiple artists the a comma\r\n                    title: track.name, //title \r\n                    albumCover: track.album.images[0].url, // URL of album image\r\n                    caption: caption\r\n                });\r\n \r\n                //prepare song to be saved\r\n                const songData = {\r\n                    title: track.name,\r\n                    artist: track.artists.map(artist => artist.name).join(', '),\r\n                    albumCover: track.album.images[0].url,                    \r\n                    comments: [],\r\n                    rating: StarRating,\r\n                    caption: caption,\r\n                }\r\n                \r\n                saveTrackToDatabase(username, songData);\r\n\r\n            }).catch(error => {\r\n                console.log('Error fetching recent track:', error); //log any errors during the call\r\n            });\r\n    };\r\n\r\n    const saveTrackToDatabase = (username, songData) => {\r\n        console.log(songData);\r\n        axios.post(`http://localhost:8082/api/user/${username}/addPost`, songData )\r\n          .then(response => {\r\n            console.log('Song post saved:', response.data);\r\n          })\r\n          .catch(error => {\r\n            console.error('Error saving the song post:', error.response.data);\r\n          });\r\n        };\r\n\r\n    const handleCommentSubmit = (e) => {\r\n\r\n        e.preventDefault(); \r\n\r\n        const commentData = {\r\n            text: newComment,\r\n            user: username\r\n        };\r\n\r\n        // axios.post(`http://localhost:8082/api/songpost/${postId}/comments`, commentData)\r\n        //     .then(response => {\r\n        //         setComments([...comments, response.data]);\r\n        //         setNewComment('');\r\n        //     })\r\n        //     .catch(error => {\r\n        //         console.error(\"Error adding comment:\", error.response?.data || error.message);\r\n        //     })\r\n    };\r\n\r\n    //Sends a POST request to the backend with the caption data\r\n    const saveCaptionToDatabase = async (caption) => {\r\n        if(!caption) return;\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:8082/api/save-caption', { setCaption });\r\n            console.log('Caption saved:', response.data);\r\n            setCaption(true);\r\n        } catch (error) {\r\n            console.error('Error saving the caption:', error.message);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    \r\n    //Function to handle \"Enter\" key in caption input\r\n    const handleCaptionKeyPress = (e) => {\r\n        if(e.key === 'Enter')\r\n        {\r\n            e.preventDefault();\r\n            postCaption();\r\n            saveCaptionToDatabase(caption);\r\n        }\r\n    }\r\n\r\n    //Function to save the caption\r\n    const postCaption = () => {\r\n        console.log('Caption is posted: \"', caption, '\"');\r\n        setCaptionPosted(true);\r\n    }\r\n\r\n    //Caption input field\r\n    const captionInput = (\r\n        <input\r\n            type=\"text\"\r\n            className=\"caption-input\"\r\n            placeholder=\"Add a caption\"\r\n            value={caption}\r\n            onChange={(e) => setCaption(e.target.value)}\r\n            onKeyDown={handleCaptionKeyPress}\r\n        />\r\n    )\r\n\r\n    //JSX for caption display\r\n    const displayCaption = (\r\n        <div className=\"caption-display\">\r\n            <p>{caption}</p>\r\n        </div>\r\n    )\r\n\r\n    //Depending on the captionPosted status, render the caption display or the caption input\r\n    const captionRender = () => {\r\n        return captionPosted ? displayCaption : captionInput;\r\n    }\r\n\r\n\r\n    // component render\r\n    return (\r\n        <div className=\"home-page\">\r\n            {/* {!token ?\r\n                <a href={getLoginURL()}>Login to Spotify</a>\r\n                : <button onClick={logout}>Logout</button>} */}\r\n\r\n            <div className=\"button-container\">\r\n                <div className=\"button-box\">\r\n                    <button onClick={getRecentTrack}>Show Last Played Song</button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Display the recent track information */}\r\n            {recentTrack && (\r\n                <div className=\"post-card\">\r\n                    <div className=\"post-card-content\">\r\n                        <h2 className=\"song-title\">{recentTrack.title}</h2>\r\n                        <h3 className=\"artist-name\">{recentTrack.artist}</h3>\r\n                    </div>\r\n                    <div className=\"post-card-image-container\">\r\n                        <img src={recentTrack.albumCover} alt={`${recentTrack.title} Album Cover`} className=\"post-card-image\" />\r\n                        <StarRating onRating={(rate) => console.log(rate)} />\r\n                    </div>\r\n                    <div className=\"post-card-content\">\r\n                        {/* Render the caption input */}\r\n                        {captionRender()}\r\n                        {/* Render existing comments */}\r\n                        <div className=\"comments-container\">\r\n                        {comments.map((c) => (\r\n                            <div key={c.id} className=\"comment\">\r\n                                <p>{c.body}</p>\r\n                                <small>{new Date(c.date).toLocaleString()}</small>\r\n                            </div>\r\n                        ))}\r\n                        </div>\r\n                        {/* Comment form */}\r\n                        <form onSubmit={handleCommentSubmit}>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"comment-input\"\r\n                                placeholder=\"Add a comment...\"\r\n                                value={newComment}\r\n                                onChange={(e) => setNewComment(e.target.value)}\r\n                            />\r\n                            <button type=\"submit\" className=\"submit-comment\">Post</button>\r\n                        </form>\r\n                    </div>\r\n                \r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}