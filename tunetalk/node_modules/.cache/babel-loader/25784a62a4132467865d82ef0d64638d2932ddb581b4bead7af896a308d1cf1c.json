{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mesac\\\\OneDrive\\\\Documents\\\\GitHub\\\\TuneTalk\\\\tunetalk\\\\src\\\\pages\\\\UserAccount\\\\SpotifyLogin.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useUser } from \"../../authentication/UserState\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SPOTIFY_AUTH = \"https://accounts.spotify.com/authorize\";\n//const REDIRECT_URI = \"http://localhost:3000/home\";\nconst REDIRECT_URI = \"http://localhost:3000/account/spotify\"; // Needed to change the uri to this as there was issues with redirecting to the home page right after spotify user is authenticated\nconst CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\";\n\n/*\r\n    Spotify scope array that allows us to get all neccesary data from the user's spotify acc\r\n    Link to definitions of scopes: https://developer.spotify.com/documentation/web-api/concepts/scopes\r\n*/\nconst spotifyScopes = ['user-read-recently-played', 'user-read-email', 'user-read-private'];\nconst SCOPES_URL_PARAM = spotifyScopes.join(\"%20\"); // Joining all the scopes together by using the SPACE_ENCODE variable that performs percent coding and represents the space in the url.  \n\n// Function that returns the access token generated once user's spotify account is authenticated \nconst getTokenAfterAuth = () => {\n  return window.location.hash.substring(1).split(\"&\").reduce((initial, item) => {\n    var parts = item.split(\"=\");\n    initial[parts[0]] = decodeURIComponent(parts[1]);\n    return initial;\n  }, {});\n};\nexport const SpotifyLogin = () => {\n  _s();\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [user, setUser] = useUser();\n  const [userInfo, setUserInfo] = useState(null); // State variable to save user's spotify info into teh userState\n  const navigate = useNavigate();\n\n  // Function that will display the page that asks the user to connect to their spotify acc for our application\n  const handleLogin = async () => {\n    window.location = `${SPOTIFY_AUTH}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=${SCOPES_URL_PARAM}&response_type=token&show_dialog=true`;\n  };\n  useEffect(() => {\n    const getUserSpotifyInfo = async () => {\n      // Check if there's a hash in the URL - no hash, that means access token was not generated\n      if (window.location.hash !== \"\") {\n        const {\n          access_token\n        } = getTokenAfterAuth(window.location.hash);\n        localStorage.setItem(\"access_token\", access_token);\n        console.log(access_token);\n        window.location.hash = \"\"; // REMOVES ACCESS TOKEN FROM URL ONCE SIGN IN IS AUTHENTICATED.\n\n        try {\n          // Fetch user information from Spotify using api below\n          const userInfoResponse = await axios.get(\"https://api.spotify.com/v1/me\", {\n            headers: {\n              Authorization: \"Bearer \" + access_token,\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          const userInfo = userInfoResponse.data; // Needed to define \n\n          // Before proceeding, check that userInfo is not null or undefined\n          if (!userInfo) {\n            throw new Error(\"User information is not available.\");\n          }\n\n          // Fetch spotify accounts details (can also check in console).\n          const spotifyUserInfo = {\n            userId: userInfo.id,\n            userUrl: userInfo.external_urls.spotify,\n            username: userInfo.display_name,\n            email: userInfo.email\n          };\n          console.log(spotifyUserInfo);\n          setUserInfo(spotifyUserInfo);\n          setAlertMessage(\"Spotify account connected!\");\n\n          // Connect to spotify login api to store data into mongodb\n          axios.post(\"http://localhost:8082/api/spotifylogin\", {\n            spotifyID: userInfo.id,\n            spotifyURL: userInfo.external_urls.spotify,\n            displayName: userInfo.display_name,\n            spotifyEmail: userInfo.email\n          }).then(res => {\n            const data = res.data;\n            console.log(data, \"spotifyUserLogin\");\n            if (data.status === \"ok\") {\n              // Now, update the user state\n              setUser({\n                isAuthenticated: true,\n                spotifyAccount: spotifyUserInfo.username\n              });\n              setAlertMessage(\"Spotify account connected!\");\n              navigate(\"/account/spotify\");\n            } else {\n              // Handle errors like not being able to store the user info\n              throw new Error(\"Unable to store spotify account into TuneTalk's database.\");\n            }\n          });\n        } catch (error) {\n          console.error(\"Error connecting to Spotify:\", error.message);\n          setAlertMessage(\"Failed to connect to Spotify\");\n        }\n      } else {\n        console.log(\"Hash / access token not found\");\n      }\n    };\n    getUserSpotifyInfo();\n  }, [navigate, setUser]);\n  useEffect(() => {\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n  }, [setUser]); // Allows useEffect hook to render only once. \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spotify-login-container\",\n    children: !user.isAuthenticated ?\n    /*#__PURE__*/\n    // Show the login button and header only if the user is not authenticated / hasn't gone through the window.location link yet\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Nearly there! \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 39\n        }, this), \" You need to connect your Spotify Account with TuneTalk\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: handleLogin,\n        children: \"Login to your Spotify Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // when User's spotify is authenticated, show alert message and Spotify user info\n    _jsxDEV(_Fragment, {\n      children: [alertMessage && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: alertMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }, this), userInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Spotify Details:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"User ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 32\n          }, this), \" \", userInfo.userId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Username:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 32\n          }, this), \" \", userInfo.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 32\n          }, this), \" \", userInfo.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 39\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => navigate('/home'),\n          children: \"Go to your Home Page!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n_s(SpotifyLogin, \"/+g2/upku3mVlypVVcK/LgQFVuU=\", false, function () {\n  return [useUser, useNavigate];\n});\n_c = SpotifyLogin;\nvar _c;\n$RefreshReg$(_c, \"SpotifyLogin\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","useUser","jsxDEV","_jsxDEV","Fragment","_Fragment","SPOTIFY_AUTH","REDIRECT_URI","CLIENT_ID","spotifyScopes","SCOPES_URL_PARAM","join","getTokenAfterAuth","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","SpotifyLogin","_s","alertMessage","setAlertMessage","user","setUser","userInfo","setUserInfo","navigate","handleLogin","getUserSpotifyInfo","access_token","localStorage","setItem","console","log","userInfoResponse","get","headers","Authorization","data","Error","spotifyUserInfo","userId","id","userUrl","external_urls","spotify","username","display_name","email","post","spotifyID","spotifyURL","displayName","spotifyEmail","then","res","status","isAuthenticated","spotifyAccount","error","message","savedUser","getItem","JSON","parse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mesac/OneDrive/Documents/GitHub/TuneTalk/tunetalk/src/pages/UserAccount/SpotifyLogin.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useUser } from \"../../authentication/UserState\";\r\n\r\nconst SPOTIFY_AUTH = \"https://accounts.spotify.com/authorize\";\r\n//const REDIRECT_URI = \"http://localhost:3000/home\";\r\nconst REDIRECT_URI = \"http://localhost:3000/account/spotify\"; // Needed to change the uri to this as there was issues with redirecting to the home page right after spotify user is authenticated\r\nconst CLIENT_ID = \"82051e28a62540019c2de5c903d8bca1\";\r\n\r\n/*\r\n    Spotify scope array that allows us to get all neccesary data from the user's spotify acc\r\n    Link to definitions of scopes: https://developer.spotify.com/documentation/web-api/concepts/scopes\r\n*/\r\nconst spotifyScopes = [\r\n    'user-read-recently-played',\r\n    'user-read-email',\r\n    'user-read-private'\r\n];\r\nconst SCOPES_URL_PARAM = spotifyScopes.join(\"%20\"); // Joining all the scopes together by using the SPACE_ENCODE variable that performs percent coding and represents the space in the url.  \r\n \r\n// Function that returns the access token generated once user's spotify account is authenticated \r\nconst getTokenAfterAuth = () => {\r\n    return window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce((initial, item) => {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n\r\n      return initial;\r\n    }, {});\r\n};\r\n\r\n\r\n\r\n\r\nexport const SpotifyLogin = () => {\r\n    const [alertMessage, setAlertMessage] = useState(\"\");\r\n    const [user, setUser] = useUser();\r\n    const [userInfo, setUserInfo] = useState(null); // State variable to save user's spotify info into teh userState\r\n    const navigate = useNavigate();\r\n\r\n    // Function that will display the page that asks the user to connect to their spotify acc for our application\r\n    const handleLogin = async () => {\r\n        window.location = `${SPOTIFY_AUTH}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=${SCOPES_URL_PARAM}&response_type=token&show_dialog=true`;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const getUserSpotifyInfo = async () => {\r\n    \r\n            // Check if there's a hash in the URL - no hash, that means access token was not generated\r\n            if (window.location.hash !== \"\") {\r\n                const { access_token } = getTokenAfterAuth(window.location.hash);\r\n                localStorage.setItem(\"access_token\", access_token);\r\n                console.log(access_token);\r\n                window.location.hash = \"\"; // REMOVES ACCESS TOKEN FROM URL ONCE SIGN IN IS AUTHENTICATED.\r\n    \r\n                try {\r\n                    // Fetch user information from Spotify using api below\r\n                    const userInfoResponse = await axios.get(\"https://api.spotify.com/v1/me\", {\r\n                        headers: {\r\n                            Authorization: \"Bearer \" + access_token,\r\n                            \"Content-Type\": \"application/json\",\r\n                        },\r\n                    });\r\n\r\n                    const userInfo = userInfoResponse.data; // Needed to define \r\n\r\n\r\n                    // Before proceeding, check that userInfo is not null or undefined\r\n                    if (!userInfo) {\r\n                        throw new Error(\"User information is not available.\");\r\n                    }\r\n\r\n                    \r\n                    // Fetch spotify accounts details (can also check in console).\r\n                    const spotifyUserInfo = {\r\n                        userId: userInfo.id,\r\n                        userUrl: userInfo.external_urls.spotify,\r\n                        username: userInfo.display_name,\r\n                        email: userInfo.email,\r\n                    };\r\n                    console.log(spotifyUserInfo);\r\n                    setUserInfo(spotifyUserInfo);\r\n                    setAlertMessage(\"Spotify account connected!\");\r\n    \r\n             \r\n                    // Connect to spotify login api to store data into mongodb\r\n                    axios.post(\"http://localhost:8082/api/spotifylogin\", {\r\n                        spotifyID: userInfo.id,\r\n                        spotifyURL: userInfo.external_urls.spotify,\r\n                        displayName: userInfo.display_name,\r\n                        spotifyEmail: userInfo.email\r\n                    })\r\n                    .then((res) => {\r\n                        const data = res.data;\r\n                        console.log(data, \"spotifyUserLogin\");\r\n\r\n                        if(data.status === \"ok\") {\r\n                            // Now, update the user state\r\n                            setUser({\r\n                                isAuthenticated: true,\r\n                                spotifyAccount: spotifyUserInfo.username, \r\n                            });\r\n                            setAlertMessage(\"Spotify account connected!\");\r\n                            navigate(\"/account/spotify\");\r\n                        } else {\r\n                            // Handle errors like not being able to store the user info\r\n                            throw new Error(\"Unable to store spotify account into TuneTalk's database.\");\r\n                        }\r\n                        \r\n                    });\r\n\r\n                } catch (error) {\r\n                    console.error(\"Error connecting to Spotify:\", error.message);\r\n                    setAlertMessage(\"Failed to connect to Spotify\");\r\n                }\r\n            } \r\n            else {\r\n                console.log(\"Hash / access token not found\");\r\n            }\r\n        };\r\n        getUserSpotifyInfo();\r\n    }, [navigate, setUser]);\r\n\r\n    useEffect(() => {\r\n        const savedUser = localStorage.getItem('user');\r\n        if (savedUser) {\r\n            setUser(JSON.parse(savedUser));\r\n        }\r\n    }, [setUser]); // Allows useEffect hook to render only once. \r\n\r\n    return (\r\n        <div className=\"spotify-login-container\">\r\n            {!user.isAuthenticated ? (\r\n                // Show the login button and header only if the user is not authenticated / hasn't gone through the window.location link yet\r\n                <>\r\n                    <h3>Nearly there! <br/> You need to connect your Spotify Account with TuneTalk</h3>\r\n                    <br/>\r\n                    <button type=\"submit\" onClick={handleLogin}>Login to your Spotify Account</button>\r\n                    <br/><br/>\r\n                </>\r\n            ) : (\r\n                // when User's spotify is authenticated, show alert message and Spotify user info\r\n                <>\r\n                    {alertMessage && (\r\n                        <h3>{alertMessage}</h3>\r\n                    )}\r\n                    \r\n                    {userInfo && (\r\n                        <div>\r\n                            <br/><br/>\r\n                            <h4>Spotify Details:</h4>\r\n                            <p><b>User ID:</b> {userInfo.userId}</p>\r\n                            <p><b>Username:</b> {userInfo.username}</p>\r\n                            <p><b>Email:</b> {userInfo.email}</p>\r\n                            <br/><br/><br/>\r\n                            <button type=\"submit\" onClick={() => navigate('/home')}>Go to your Home Page!</button>\r\n                        </div> \r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}